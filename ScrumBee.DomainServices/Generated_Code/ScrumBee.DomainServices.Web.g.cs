//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScrumBee.DomainServices.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Web.Ria.Data;
    using System.Windows.Ria.Data;
    using ScrumBee.Model;
    
    
    public sealed partial class ScrumBeeContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ScrumBeeContext() : 
                this(new HttpDomainClient(new Uri("DataService.axd/ScrumBee-DomainServices-Web-ScrumBeeService/", System.UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a data service URI.
        /// </summary>
        /// <param name="serviceUri">
        /// The ScrumBeeService data service URI.
        /// </param>
        public ScrumBeeContext(Uri serviceUri) : 
                this(new HttpDomainClient(serviceUri))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a DomainClient instance.
        /// </summary>
        /// <param name="domainClient">
        /// The DomainClient instance the DomainContext should use.
        /// </param>
        public ScrumBeeContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        public EntityList<Story> Stories
        {
            get
            {
                return base.Entities.GetEntityList<Story>();
            }
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetStories'.
        /// </summary>
        public EntityQuery<Story> GetStoriesQuery()
        {
            return base.CreateQuery<Story>("GetStories", null, false, true);
        }
        
        protected override EntityContainer CreateEntityContainer()
        {
            return new ScrumBeeContextEntityContainer();
        }
        
        internal sealed class ScrumBeeContextEntityContainer : EntityContainer
        {
            
            public ScrumBeeContextEntityContainer()
            {
                this.CreateEntityList<Story>(EntityListOperations.All);
            }
        }
    }
}
namespace ScrumBee.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Web.Ria.Data;
    using System.Windows.Ria.Data;
    
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ScrumBee.Model")]
    public sealed partial class Story : Entity
    {
        
        private string _description;
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Story()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.ValidateProperty("Description", value);
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.ValidateProperty("Id", value);
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.ValidateProperty("Name", value);
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
